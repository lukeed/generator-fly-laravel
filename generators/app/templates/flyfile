var browserSync = require('browser-sync');
var proxy = '<%= proxy %>';

var isProd = false;
var isWatch = false;
var isServer = false;

var src = 'resources/assets';
var dest = 'public/assets';

var paths = {
  scripts: {
    src: [src + '/scripts/**/*.js'],
    dest: dest + '/js'
  },
  styles: {
    src: [src + '<%= cssPath %>'],
    dest: dest + '/css'
  },
  images: {
    src: [src + '/images/**/*'],
    dest: dest + '/img'
  },
  fonts: {
    src: [src + '/fonts/**/*'],
    dest: dest + '/fonts'
  }
};

exports.default = function * () {
  /** @desc Default task */
  isWatch = true;
  isProd = false;
  yield this.start('clean');
  yield this.watch(paths.scripts.src, ['eslint', 'scripts']);
  yield this.watch(paths.styles.src, 'styles');
  yield this.watch(paths.images.src, 'images');
  yield this.watch(paths.fonts.src, 'fonts');
  // yield this.watch(paths.html.src, 'html');
};

exports.watch = function * () {
  /** @desc Run a dev server & Recompile when files change */
  yield this.start(['default', 'serve']);
};

exports.build = function * () {
  /** @desc Build files for production */
  isProd = true; isWatch = false;
  yield this.start('clean');
  yield this.start(['eslint', 'images', 'fonts', 'scripts', 'styles', 'html'], {parallel: true});
  yield this.start('rev');
};

// ###
// # Tasks
// ###

exports.clean = function * () {
  /** @desc Delete the output directories */
  yield this.clear('dist');
};

exports.eslint = function * () {
  /** @desc Lint javascript */
  yield this.source(paths.scripts.src).eslint();
};

exports.images = function * () {
  /** @desc Copy all images, compress them, then send to dest */
  yield this.source(paths.images.src).target(paths.images.dest);
  reload();
};

exports.fonts = function * () {
  /** @desc Copy all fonts, then send to dest */
  yield this.source(paths.fonts.src).target(paths.fonts.dest);
  reload();
};

exports.scripts = function * () {
  /** @desc Compile javascript files */
  yield this
    .source(paths.scripts.src)
    .babel({
      presets: ['es2015'],
      sourceMaps: !isProd
    })
    .concat('main.js')
    .target(paths.scripts.dest);

  reload();
};

exports.styles = function * () {
  /** @desc Compile and automatically prefix stylesheets */
  yield this
    .source(paths.styles.src)
    <% if (cssTool == 'sass') { %>
    .sass({outputStyle: 'compressed'})
    <% } else if (cssTool == 'stylus') { %>
    .stylus()
    <% } else if (cssTool == 'less') { %>
    .less()
    <% } %>
    .autoprefixer()
    .concat('main.css')
    .target(paths.styles.dest);

  reload();
};

exports.rev = function * () {
  /** @desc Versionify production files for cache-busting */
  const assets = ['scripts', 'styles', 'images'].map(type => {
    return `${paths[type].dest}/**/*`;
  });

  return this.source(assets).rev({
    base: dest,
    replace: true
  });
};

exports.serve = function * () {
  /** @desc Launch local server, proxied */
  isServer = true;

  browserSync({
    notify: false,
    logPrefix: ' âœˆ ',
    proxy: proxy
  });
};

function reload() {
  if (isWatch && isServer) {
    browserSync.reload();
  }
}

